#!/usr/bin/env ruby

require 'optparse'
require 'serialport'
require 'json'
require 'aloof'

options = {
  dev: '/dev/ttyUSB0',
  baud: 38400,
  debug: false,
  port: 4567,
  registers: {},
  transport: :slip,
  timeout: 1
}

OptionParser.new do |opts|
  
  opts.banner = "pulse_config <command> [options]"
  
  opts.separator ""
  opts.separator "commands:"
  opts.separator ""
  
  opts.separator "read <name>"
  opts.separator "write <name> [value]"
  
  opts.separator ""
  
  opts.separator ""
  opts.separator "options:"
  opts.separator ""
  
  opts.on("-r", "--registers REGISTERS", "register definition file") do |value|
    options[:registers] = JSON.parse(File.read(value), symbolize_names: true)
  end
  
  opts.on("-t", "--transport TRANSPORT", "specify transport") do |value|  
    options[:transport] = value.to_sym 
  end
  
  opts.on("-d", "--dev DEVICE", "specify serial device") do |value|
    options[:dev] = value
  end
  
  opts.on("-b", "--baud BAUD", "specify serial baud rate") do |value|
    options[:baud] = value.to_i
  end
  
  opts.on("--host HOST", "specify IP host") do |value|
    
    options[:host] = value
  end
  
  opts.on("--port PORT", "specify IP port") do |value|
    options[:port] = value.to_i
  end
  
  opts.on("--debug", "enable debug") do
    options[:debug] = true
  end
  
  opts.on("--retry RETRY", "set number of retries") do |value|
    
    if value.to_i < 1 
      STDERR.puts "--retry must be an integer greater than 0"
      abort
    end
    
    options[:retries] = value.to_i    
    
  end
  
  opts.on("--timeout TIMEOUT", "set timeout in seconds") do |value|
    
    if value.to_i < 1
      STDERR.puts "--timeout must be an integer greater than 0"
      abort
    end
    
    options[:timeout] = value.to_i
    
  end
  
  opts.on_tail("-h", "--help", "show this message") do
    puts opts
    exit
  end
  
end.parse!

if ARGV.size == 0
  STDERR.puts "need argument"
  abort
end

client = Aloof::Client.new(**options)

client.open

case ARGV[0]
when 'read'

  puts client.read(ARGV[1], from_terminal: true).join(" ")

when 'write'

  puts client.write(ARGV[1], ARGV[2], from_terminal: true).join(" ")
  
end

client.close

exit

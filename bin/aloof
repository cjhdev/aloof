#!/usr/bin/env ruby

require 'optparse'
require 'serialport'
require 'json'
require 'aloof'
require 'ostruct'

options = OpenStruct.new

options.dev = '/dev/ttyUSB0'
options.baud = 38400
options.debug =  false
options.port = 4567
options.object_table = Aloof::ObjectTable.new
options.transport = :slip_crc16
options.timeout = 1

OptionParser.new do |opts|
  
  opts.banner = "pulse_config <command> [options]"
  
  opts.separator ""
  opts.separator "commands:"
  opts.separator ""
  
  opts.separator "read <name>"
  opts.separator "write <name> [value]"
  
  opts.separator ""
  
  opts.separator ""
  opts.separator "options:"
  opts.separator ""
  
  opts.on("-r", "--registers REGISTERS", "register definition file") do |value|
    options.object_table = Aloof::ObjectTable.from_json(File.read(value))
  end
  
  opts.on("-t", "--transport TRANSPORT", "specify transport") do |value|  
    options.transport = value.to_sym 
  end
  
  opts.on("-d", "--dev DEVICE", "specify serial device") do |value|
    options.dev = value
  end
  
  opts.on("-b", "--baud BAUD", "specify serial baud rate") do |value|
    options.baud = value.to_i
  end
  
  opts.on("--host HOST", "specify IP host") do |value|
    
    options.host = value
  end
  
  opts.on("--port PORT", "specify IP port") do |value|
    options.port = value.to_i
  end
  
  opts.on("--debug", "enable debug") do
    options.debug = true
  end
  
  opts.on("--retry RETRY", "set number of retries") do |value|
    
    if value.to_i < 1 
      STDERR.puts "--retry must be an integer greater than 0"
      abort
    end
    
    options.retries = value.to_i    
    
  end
  
  opts.on("--timeout TIMEOUT", "set timeout in seconds") do |value|
    
    if value.to_i < 1
      STDERR.puts "--timeout must be an integer greater than 0"
      abort
    end
    
    options.timeout = value.to_i
    
  end
  
  opts.on_tail("-h", "--help", "show this message") do
    puts opts
    exit
  end
  
end.parse!

if ARGV.size == 0
  STDERR.puts "need argument"
  abort
end

Aloof::Client.session(**options.to_h) do |client|

  case ARGV[0]
  when 'read'
    
    if obj = options.object_table.lookup_name(ARGV[1])  
      
      begin
        puts Aloof::TerminalType.new(obj.type).to_terminal(
          client.read(obj.name)
        )
      rescue Aloof::TimeoutError
        STDERR.puts "timeout"
      rescue => e
        STDERR.puts e
      end    
    else    
      STDERR.puts "unknown object"    
    end    
    
  when 'write'

    if obj = options.object_table.lookup_name(ARGV[1])  
      begin
        client.write(obj.name, 
          Aloof::TerminalType.new(obj.type).from_terminal(ARGV[2])
        )
      rescue => e
        STDERR.puts e
      end  
    else
      STDERR.puts "unknown object"    
    end
    
  when 'listen'

    client.on_alert do |msg|
      puts "[#{Time.now}] #{msg.aid} #{msg.type}"
    end
    
    begin
      sleep
    rescue Interrupt
    end
    
  end

end

exit
